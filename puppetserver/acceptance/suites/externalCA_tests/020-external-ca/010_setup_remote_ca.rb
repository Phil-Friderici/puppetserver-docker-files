confine(:except, :platform => ['windows','aix','solaris','darwin'])

# Pre-setup: Installing necessary packages
step 'Install facter and OpenSSL on External CA' do
  on(ca, "rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm", :acceptable_exit_codes => [0,1])
  install_package ca, 'facter'
  install_package ca, 'openssl'
end

#Pre-setup: Generate SSH Keys on Root CA
if on(ca, "test ! -f /root/.ssh/id_rsa", :accept_all_exit_codes => true).exit_code == 0
  on(ca, "ssh-keygen -f /root/.ssh/id_rsa -N \"\"")
end
ca_ssh_key = on(ca, "cat /root/.ssh/id_rsa.pub").stdout.chomp

#Pre-setup: Get Hostnames and FQDNs of Puppet Master & Root CA
pm_hostname = fact_on(master, "hostname").chomp
pm_fqdn = fact_on(master, "fqdn").chomp
pm_domain = fact_on(master, "domain").chomp
ca_fqdn = fact_on(ca, "fqdn").chomp
ca_hostname = fact_on(ca, "hostname").chomp

#Pre-Setup: Define Directories used on Puppet Master and Root CA
ca_dir = "/root/rakeca"
int_ca_dir = "/root/rakeca/intermediate"
p_ssl = "/etc/puppetlabs/puppet/ssl"

step 'Push External CA SSH public key onto all hosts' do
  hosts.each do |h|
    on(h, "echo #{ca_ssh_key} >> /root/.ssh/authorized_keys")
  end
end

step 'Install Git & Pull Down rakeca on External CA' do
  install_package ca, 'git'
  on(ca, "gem install rake")
  on(ca, "rm -rf rakeca")
  on(ca, "git clone https://github.com/puppetlabs/rakeca")
end

step 'turn on the fields defined in SERVER-816' do
  #TODO: Someday we will deal with this string of hacks in a more graceful way
  keyusage = 'keyUsage=critical,nonRepudiation,digitalSignature,keyEncipherment,dataEncipherment'
  #extendedKeyUsage = 'extendedKeyUsage=serverAuth,clientAuth'
  extendedKeyUsage = 'extendedKeyUsage=serverAuth,clientAuth,codeSigning,emailProtection,timeStamping,msCodeInd,msCodeCom,msCTLSign,msEFS'
  on(ca, "cd #{ca_dir};sed -i -e 's/keyUsage = nonRepudiation, digitalSignature, keyEncipherment/#{keyusage}\\n#{extendedKeyUsage}/g' openssl.cnf.tmp")
  on(ca, "cd #{int_ca_dir};sed -i -e 's/keyUsage = nonRepudiation, digitalSignature, keyEncipherment/#{keyusage}\\n#{extendedKeyUsage}/g' openssl.cnf.tmp")

  on(ca, "cd #{ca_dir};sed -i -e 's/authorityKeyIdentifier=keyid:always,issuer:always/authorityKeyIdentifier=keyid:always,issuer:always\\nauthorityInfoAccess = OCSP;URI:http:\\/\\/ocsp.my.host\\/\\ncrlDistributionPoints=URI:http:\\/\\/myhost.com\\/myca.crl\\//g' openssl.cnf.tmp" )

  s = 'DNS.1 = HOSTNAME.delivery.puppetlabs.net'
  upn = 'DNS.1 = HOSTNAME.delivery.puppetlabs.net\\notherName=1.3.6.1.4.1.311.20.2.3;UTF8:puppetserver\\/microlove@ohdeargodpleaseno.com' 
  on(ca, "cd #{ca_dir};sed -i -e 's/#{s}/#{upn}/g' openssl.cnf.tmp")
  on(ca, "cd #{int_ca_dir};sed -i -e 's/#{s}/#{upn}/g' openssl.cnf.tmp")
end

step 'Modify openssl.cnf to use FQDN of Root CA and Initialize Root CA' do
  on(ca, "cd #{ca_dir};sed -e 's/HOSTNAME/#{ca_hostname}/g' openssl.cnf.tmp > openssl.cnf")
  on(ca, "cd #{ca_dir};echo #{ca_fqdn} > ca_fqdn ;rake init")
  on(ca, "cd #{ca_dir};rm -rf openssl.cnf; sed -e 's/HOSTNAME/trash/g' openssl.cnf.tmp > openssl.cnf")
  on(ca, "cd #{ca_dir};yes \"$(echo)\" | rake gencsr CN=trash;rake sign")
  on(ca, "cd #{ca_dir};rake revoke CN=trash.cert")
end

step 'Initialize Intermediate CA' do
  on(ca, "cd #{int_ca_dir};sed -e 's/HOSTNAME/#{ca_hostname}/g' openssl.cnf.tmp > openssl.cnf")
  on(ca, "cd #{int_ca_dir};echo #{ca_fqdn} > ca_fqdn;rake init")
end

step 'Generate a CRL for the Intermediate CA' do
  on(ca, "cd #{int_ca_dir};sed -e 's/commonName_default = \${ENV::CN}//g' openssl.cnf.tmp > openssl.cnf")
  on(ca, "cd #{int_ca_dir};rake gencrl; rake sign")
end

step 'Back-up the current Certs & Keys' do 
  on(master, "cd #{p_ssl};mkdir private_keys.bak;cp -a private_keys/. private_keys.bak/")
  on(master, "cd #{p_ssl};mkdir public_keys.bak;cp -a public_keys/. public_keys.bak/")
  on(master, "cd #{p_ssl};mkdir certs.bak;cp -a certs/. certs.bak/")
end

step 'Backup the SSL directory on the master' do
  on(master, "cp -R #{p_ssl} /etc/puppetlabs/puppet/ssl.back")
end

step 'Stop the puppetserver service' do
  on(master, "service puppetserver stop")
end

#step 'Clear Certs Generated by Puppet Master' do
#  on(master, 'find $(puppet config print ssldir)/* -type f -exec rm {} +')
#end

step 'Create & Copy Keys and Certs to Puppet Master/Agent from Intermediate CA' do
  agents.each do |my_agent| 
    agent_hostname = fact_on(my_agent, "hostname").chomp
    agent_fqdn = fact_on(my_agent, "fqdn").chomp
    on(ca, "cd #{int_ca_dir};rm -rf openssl.cnf; sed -e 's/HOSTNAME/#{agent_hostname}/g' openssl.cnf.tmp > openssl.cnf.1")
    if agent_hostname == pm_hostname
      on(ca, "cd #{int_ca_dir};awk '/DNS.2/ {print; print \"DNS.3 = puppet\"; next }1' openssl.cnf.1 > openssl.cnf;rm openssl.cnf.1")
      on(ca, "cd #{int_ca_dir};scp -o stricthostkeychecking=no ca_crl.pem root@#{agent_hostname}:#{p_ssl}/ca/ca_crl.pem")
    else
      on(ca, "cd #{int_ca_dir};mv openssl.cnf.1 openssl.cnf")
    end
    on(ca, "cd #{int_ca_dir};yes \"$(echo)\" | rake gencsr CN=#{agent_fqdn};rake sign")
    on(ca, "cd #{int_ca_dir};openssl x509 -pubkey -noout -in certs/#{agent_fqdn}.cert > #{agent_fqdn}.pub")
    on(ca, "cd #{int_ca_dir};scp -o stricthostkeychecking=no private/#{agent_fqdn}.key root@#{agent_hostname}:#{p_ssl}/private_keys/#{agent_fqdn}.pem")
    on(ca, "cd #{int_ca_dir};scp #{agent_fqdn}.pub root@#{agent_hostname}:#{p_ssl}/public_keys/#{agent_fqdn}.pem")
    on(ca, "cd #{int_ca_dir};scp certs/#{agent_fqdn}.cert root@#{agent_hostname}:#{p_ssl}/certs/#{agent_fqdn}.pem")
    on(ca, "cd #{int_ca_dir};scp -o stricthostkeychecking=no private/#{agent_fqdn}.key root@#{pm_hostname}:#{p_ssl}/private_keys/#{agent_fqdn}.pem")
    on(ca, "cd #{int_ca_dir};scp #{agent_fqdn}.pub root@#{pm_hostname}:#{p_ssl}/public_keys/#{agent_fqdn}.pem")
    on(ca, "cd #{int_ca_dir};scp certs/#{agent_fqdn}.cert root@#{pm_hostname}:#{p_ssl}/certs/#{agent_fqdn}.pem")
    on(ca, "cd #{int_ca_dir};scp ca_crl.pem root@#{agent_hostname}:#{p_ssl}/crl.pem")
    on(ca, "cd #{int_ca_dir};scp certs/ca_bundle.pem root@#{agent_hostname}:#{p_ssl}/certs/ca.pem")
    on(ca, "cd #{int_ca_dir};scp certs/intermediate.cert.pem root@#{agent_hostname}:#{p_ssl}/certs/issuer.pem")
    on(my_agent, puppet('config', "set  --section agent ssl_client_ca_auth #{p_ssl}/certs/issuer.pem"))
    on(my_agent, puppet('config', 'set  --section agent certificate_revocation false')) #Work around for not being able to get CRL
  end
  on(ca, "cd #{int_ca_dir};rm -rf openssl.cnf; sed -e 's/HOSTNAME/#{ca_hostname}/g' openssl.cnf.tmp > openssl.cnf")
end

step 'Correct owner and permissions inside the certs directory' do
  on(master, 'chown -R puppet:puppet /etc/puppetlabs/puppet/ssl/certs')
  on(master, 'chmod -R 0644 /etc/puppetlabs/puppet/ssl/certs')
end


step 'Restart Puppet Services' do
  on(master, "service puppetserver start")
  on(master, "service puppet start")
  sleep 15
end

step 'if we can not do an agent run, we should fail' do
  on(master, "puppet agent -t --server #{master}", :acceptable_error_code => [0,2])
end

